library SpellOrbitalBomb requires optional HandleHT {
    /* === Настройки заклинания === */

    constant integer abilityId = 'AHob'; // Равкод способности
    constant real strikeDelay = 2; // Задержка перед ударом
    constant string markEffect = "Effect\\PointTarget.mdl"; // Эффект пометки взрыва

    // Задержка перед взрывом
    function getExplodeDelay() -> real {
        return 2.;
    }

    // Период появления взрывов
    function getStrikePeriod() -> real {
        return .25;
    }  

    // Количество 
    function getStrikeCount() -> integer {
        return 5*level;
    }

    // Радиус сканирования
    function getScanRange() -> real {
        return 400.;
    }

    function getDamageRange() -> real {
        return 150.;
    }

    // Проверка целей
    function isTarget() -> boolean {
        if (caster == target) return false;
        if (IsUnitType(target, UNIT_TYPE_FLYING)) return false;
        if (IsUnitType(target, UNIT_TYPE_MAGIC_IMMUNE)) return false;
        if (!IsUnitEnemy(target, GetOwningPlayer(caster))) return false;
        return true;
    }

    // Функция, вызываемая при нанесении урона
    function onDamage(){
        real damage = level*50;
        UnitDamageTarget(caster, target, damage, false, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS);
    }
    
    /* === Создаёмм необходимые переменные === */
    hashtable ht; // Хэштаблица для записи данных на хэндл
    group g = CreateGroup(); // Используем одну группу для всех перебров, что не заморачиваться с удалением
    timer ticker;
    unit caster, target;
    real spellX, spellY, range, rangeRandom, markX, markY, angle, period, delay, elapsed;
    integer level, count, i, tickerId, created, exploaded;
    
    /* === Реализация заклинания  === */

    function onInit(){
        trigger t;

        // Используем одну хэштаблицу для хранения данных на хэндлах
        // При её отсутствии инициализируем новую
        static if (LIBRARY_HandleHT) ht = HandleHT;
        else ht = InitHashtable();

        t = CreateTrigger();
        for (0 <= i < bj_MAX_PLAYER_SLOTS){
            TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
        }
        TriggerAddAction(t, function(){
            if (abilityId != GetSpellAbilityId()) return; // Используем return чтоб не использовать Condition
            caster = GetTriggerUnit();
            level = GetUnitAbilityLevel(caster, abilityId);
            spellX = GetSpellTargetX();
            spellY = GetSpellTargetY();
            range = getScanRange();
            count = getStrikeCount();
            period = getStrikePeriod();
            delay = getExplodeDelay();

            // Создаём таймер и сохраняем на него нужные данные
            ticker = CreateTimer();
            tickerId = GetHandleId(ticker);
            SaveUnitHandle(ht, tickerId, 'cstr', caster);
            SaveReal(ht, tickerId, 0, 0); // elapsed
            SaveReal(ht, tickerId, 1, period); // period
            SaveReal(ht, tickerId, 2, delay); // delay
            SaveReal(ht, tickerId, 3, getDamageRange()); // damage range
            SaveInteger(ht, tickerId, 0, level);
            SaveInteger(ht, tickerId, 1, count);
            SaveInteger(ht, tickerId, 2, 0); // created
            SaveInteger(ht, tickerId, 3, 0); // exploaded
            for(0 <= i < count){
                angle = GetRandomReal(0, 2*bj_PI);
                rangeRandom = SquareRoot(GetRandomReal(0, range) * range); // Используем корень для равномерного распределения
                markX = spellX + rangeRandom * Cos(angle);
                markY = spellY + rangeRandom * Sin(angle);
                SaveReal(ht, tickerId, 10 + i, markX);
                SaveReal(ht, tickerId, 10 + i + count, markY);
            }

            /*
            TimerStart(ticker, period, true, function(){
                ticker = GetExpiredTimer();
                tickerId = GetHandleId(ticker);
                caster = LoadUnitHandle(ht, tickerId, 'cstr');
                level = LoadInteger(ht, tickerId, 'levl');
                count = LoadInteger(ht, tickerId, 1);
                created = LoadInteger(ht, tickerId, 2); // created
                exploaded = LoadInteger(ht, tickerId, 3); // exploaded
                elapsed = LoadReal(ht, tickerId, 0);
                period = LoadReal(ht, tickerId, 1);
                delay = LoadReal(ht, tickerId, 2);
                
                SaveReal(ht, tickerId, 0, elapsed + period);

                markX = LoadReal(ht, tickerId, 10 + created);
                markY = LoadReal(ht, tickerId, 10 + created + count);

                if (created < count){
                    SaveUnitHandle(ht, tickerId, 10 + created, CreateUnit(markOwner, markId, markX, markY, GetRandomReal(0, 360))); // Ид даммика для прицела
                    SaveInteger(ht, tickerId, 2, created + 1);
                }

                return;
                
                if (elapsed > delay && exploaded < count){
                    SaveInteger(ht, tickerId, 3, exploaded + 1);
                    RemoveUnit(LoadUnitHandle(ht, tickerId, 10 + exploaded));

                    range = LoadReal(ht, tickerId, 3);

                    GroupClear(g); // Не забываем очистить группу, чтоб не зацепить прошлых юнитов
                    GroupEnumUnitsInRange(g, markX, markY, range + 200, null); // Делаем радиус немного больше, ибо функция не учитывает радиус юнита
                    ForGroup(g, function(){
                        target = GetEnumUnit();
                        if (!UnitAlive(target)) return;
                        if (!IsUnitInRangeXY(target, markX, markY, range)) return; // Отсеиваем юнитов по расстоянию функцией, которая учитывает радиус юнита
                        if (!isTarget()) return;
                        onDamage();
                    });
                }
                
                if (created >= count && exploaded >= count){
                    PauseTimer(ticker); // Останавливаем периодические таймеры перед удалением
                    DestroyTimer(ticker);
                    FlushChildHashtable(ht, tickerId);
                }
            });
            */
        });

        t = null;
    }
}