library SpellBeamStrike requires optional HandleHT {
    /* === Настройки заклинания === */

    constant integer abilityId = 'AHbs'; // Равкод способности
    
    constant real delay = 3.; // Задержка взрыва
    
    constant real damageRadiusGround = 300; // Радиус поражения наземных целей
    constant real damageRadiusFly = 80; // Радиус поражения летающих целей
    
    constant string effectWait = "Abilities\\Spells\\Human\\slow\\slowtarget.mdl"; // Еффект перед взывром
    constant string effectWater = "Effect\\SpellBeamStrikeWater.mdl"; // Еффект взрыва на воде
    constant string effectGround = "Effect\\SpellBeamStrikeGround.mdl"; // Еффект взрыва на земле
    
    // Функция, вызываемая при касте заклинания
    function onCast(){
        DestroyEffect(AddSpecialEffect("Effect\\SpellBeamStrike.mdl", spellX, spellY));
    }

    // Функция вызываемая при взрыве
    function onExplosive(){
        string e;
        if (!IsTerrainPathable(spellX, spellY, PATHING_TYPE_FLOATABILITY)) e = effectWater;
        else e = effectGround;
        DestroyEffect(AddSpecialEffect(e, spellX, spellY));
    }

    // Проверка целей
    function isTarget() -> boolean {
        if (caster == target) return false;
        if (!IsUnitEnemy(target, GetOwningPlayer(caster))) return false;
        if (IsUnitType(target, UNIT_TYPE_MAGIC_IMMUNE)) return false;
        return true;
    }

    // Функция, вызываемая при нанесении урона
    function onDamage(){
        real damage = level*100;
        UnitDamageTarget(caster, target, damage, false, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS);
    }

    /* === Создаёмм необходимые переменные === */
    
    hashtable ht; // Хэштаблица для записи данных на хэндл
    group g = CreateGroup(); // Используем одну группу для всех перебров, что не заморачиваться с удалением
    unit caster, target;
    integer level, tickerId;
    real spellX, spellY;
    timer ticker;

    /* === Реализация заклинания  === */

    function onInit(){
        integer i;
        trigger t = CreateTrigger();

        // Используем одну хэштаблицу для хранения данных на хэндлах
        // При её отсутствии инициализируем новую
        static if (LIBRARY_HandleHT) ht = HandleHT;
        else ht = InitHashtable();

        for (0 <= i < bj_MAX_PLAYER_SLOTS) TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
        TriggerAddAction(t, function(){
            if (abilityId != GetSpellAbilityId()) return; // Используем return чтоб не использовать Condition
            caster = GetTriggerUnit();
            spellX = GetSpellTargetX();
            spellY = GetSpellTargetY();
            level = GetUnitAbilityLevel(caster, abilityId);
            
            // Создаём таймер и сохраняем данные на его хэндл
            ticker = CreateTimer();
            tickerId = GetHandleId(ticker);
            SaveUnitHandle(ht, tickerId, 'cstr', caster);
            SaveEffectHandle(ht, tickerId, 'efct', AddSpecialEffect(effectWait, spellX, spellY));
            SaveInteger(ht, tickerId, 'levl', level);
            SaveReal(ht, tickerId, 'splX', spellX);
            SaveReal(ht, tickerId, 'splY', spellY);
            
            onCast();
            
            TimerStart(ticker, delay, false, function(){
                ticker = GetExpiredTimer();
                tickerId = GetHandleId(ticker);
                caster = LoadUnitHandle(ht, tickerId, 'cstr');
                level = LoadInteger(ht, tickerId, 'levl');
                spellX = LoadReal(ht, tickerId, 'splX');
                spellY = LoadReal(ht, tickerId, 'splY');
                
                DestroyEffect(LoadEffectHandle(ht, tickerId, 'efct')); // Уничтожаем созданный еффект
                onExplosive(); // Создаём взрыв

                GroupClear(g); // Не забываем очистить группу, чтоб не зацепить прошлых юнитов
                GroupEnumUnitsInRange(g, spellX, spellY, RMaxBJ(damageRadiusGround, damageRadiusFly) + 200, null); // Делаем радиус немного больше, ибо функция не учитывает радиус юнита
                
                ForGroup(g, function (){
                    real dst;
                    target = GetEnumUnit();
                    if (!UnitAlive(target)) return;
                    if (!isTarget()) return;
                    if (IsUnitType(target, UNIT_TYPE_FLYING)) dst = damageRadiusFly;
                    else dst = damageRadiusGround;
                    if (!IsUnitInRangeXY(target, spellX, spellY, dst)) return;
                    onDamage();
                });

                DestroyTimer(ticker);
                FlushChildHashtable(ht, tickerId);
            });
        });

        t = null;
    }
}