library SpellEntanglingRootsAOE {

    /* === Настройки заклинания === */

    constant integer abilityId  = 'A000';   // Способность для героя.
    
    constant integer dummyAbilityId  = 'A001';   // Способность для дамми. В ней производится настройка всех параметров
    
    
    constant integer dummyId    = 'dumy';   // Равкод дамми кастера

    constant string SpellOrder  = "entanglingroots"; // Строка приказа для дамми способности

    constant integer Range      = 300;      // Радиус поражения
    
    
    function DummyCastBuff(unit caster, unit target){
        integer pid = GetPlayerId(GetOwningPlayer(caster));
        
        if (GetUnitState(target, UNIT_STATE_LIFE) > 0.405){
            SetUnitX(dummys[pid], GetUnitX(target));
            SetUnitY(dummys[pid], GetUnitY(target));
            SetUnitAbilityLevel(dummys[pid], dummyAbilityId, GetUnitAbilityLevel(caster, abilityId));
            IssueTargetOrder(dummys[pid], SpellOrder, target);
        }
    }


    /* === Создаёмм необходимые переменные === */
    unit caster, target, dummys[];
    integer level;

    function onInit(){
        trigger t = CreateTrigger();
        integer i;
        
        for (0 <= i < bj_MAX_PLAYER_SLOTS) {
            dummys[i] = CreateUnit(Player(i), dummyId, 0, 0, 0);
            UnitAddAbility(dummys[i], dummyAbilityId);
            TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
        }

        TriggerAddCondition(t, Condition( function() -> boolean { return abilityId == GetSpellAbilityId(); }));
        TriggerAddAction(t, function(){
            location loc = GetSpellTargetLoc();
            real x = GetLocationX(loc);
            real y = GetLocationY(loc);
            group g = CreateGroup();
            unit u;
            
            GroupEnumUnitsInRange(g, x, y, Range, Condition(function() -> boolean {
                return 
                    GetUnitState(GetFilterUnit(), UNIT_STATE_LIFE) > 0.405 &&
                    IsPlayerEnemy(GetOwningPlayer(GetTriggerUnit()), GetOwningPlayer(GetFilterUnit())) &&
                    !IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) &&
                    !IsUnitType(GetFilterUnit(), UNIT_TYPE_FLYING);
            }));
            
            while(true){
                u = FirstOfGroup(g);
                if (u == null) { break; }
                DummyCastBuff(GetTriggerUnit(), u);
                GroupRemoveUnit(g, u);
            }
            
            RemoveLocation(loc);
            DestroyGroup(g);
            loc = null; g = null;
        });

        t = null;
    }
}