library SpellIllusionBlink requires optional HandleHT {
    /* === Настройки заклинания === */

    constant integer blinkId = 'SEbl'; // Ид кастомного блинка
    constant integer illusionId = 'CIil';

    /* === Реализация заклинания === */
    hashtable ht;
    unit caster, illusionUnit;
    integer level;
    ability illusionAbility;
    trigger trig;

    function onInit() {
        trigger t = CreateTrigger();
        integer i;

        // Используем единую хэштаблицу для хранения данных на хэндлах
        static if (LIBRARY_HandleHT) ht = HandleHT;
        else ht = InitHashtable();

        // Слушаем событие каста для всех игроков, экономя лишний вызов функции
        for (0 <= i < bj_MAX_PLAYER_SLOTS) {
            TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
        }
        TriggerAddAction(t, function() {
            if (blinkId != GetSpellAbilityId()) return; // Используем return чтоб не использовать Condition
            caster = GetTriggerUnit();
            level = GetUnitAbilityLevel(caster, blinkId);

            // Создаём динамический триггер для того, чтоб отследить иллюзию
            trig  = CreateTrigger();
            TriggerRegisterUnitEvent(trig, caster, EVENT_UNIT_SUMMON);
            TriggerAddAction(trig, function(){
                caster = GetSummoningUnit();
                illusionUnit = GetSummonedUnit();
                SetUnitX(illusionUnit, GetUnitX(caster));
                SetUnitY(illusionUnit, GetUnitY(caster));
                SetUnitFacingEx(illusionUnit, GetUnitFacing(caster), true);

                trig = GetTriggeringTrigger();
                TriggerClearActions(trig);
                DestroyTrigger(trig);
            });

            // Добавляем способность иллюзий и кастуем её
            if (GetUnitAbilityLevel(caster, illusionId) == 0) UnitAddAbility(caster, illusionId);
            SetUnitAbilityLevel(caster, illusionId, level);
            illusionAbility = GetUnitAbility(caster, illusionId);
            ShowAbility(illusionAbility, false);
            CastAbilityTarget(illusionAbility, caster);

        });

        t = null;
    }
}
